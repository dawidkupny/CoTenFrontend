
#Tydzień 2


    Ciekawe linki
        https://validator.w3.org/nu/#textarea
        https://www.w3.org/TR/html52/
        coolors.co

    !+tab - szkielet strony html w visual studio

    https://codepen.io/maciejkorsan/pen/8db755719dea64797342e1840ff2b7ee

#Tydzień 3

    Lekcja 5
        Jedno konkretne id powinno być jedno na stronie, nie uzywac tego samego id do wielu elementów.

        !important, raczej nie powinno się używać, lepiej unikać.

        Specyficzność w CSS, kolejność:
        (!important, style=""), #name, .name, element
        coś co ma wyższą specyficzność wygrywa i ta własność jest brana pod uwagę

        Jeśli specyficzność jest równa pierwszeństwo ma selektor "bliżej" elementu. Czyli w zasadzie niżej osadzony w css'ie

        Lepiej unikać zagnieżdżeń w selektorach, lepiej stworzyć klasę niż zagnieżdżać pełno elementów.
        Tworzymy klasę nawet jak mamy jeden element danego typu

        Starać się, żeby element miał jedną klasę (nie zwiększaj specyficzności bez potrzeby)

        Zachęca do wrócenia do tej lekcji po jakimś czasie dla przypomnienia



    Lekcja 4

        Kody odpowiedzi

        -30x (301, 302 itd.) - przekierowania - Szukasz w złym miejscu - przekieruję Cię w dobre (bo wiem gdzie)
        -404 - Nie ma tego czego szukamy
        -50x - błędy serwera, wewnętrzne z tym nic nie możemy zrobić.


        https://cotenfrontend.pl/img/wtf.svg
        / - ten slash to root, określa ścieżkę, gdzie szukać zasobu, czyli w /img/ i tam plik wtf.svg

        Scieżki względne(2) i bezwzględne(1):
        https://cotenfrontend.pl/
        1: <img src="/img/wtf.svg"/>    -> 200 OK -> https://cotenfrontend.pl/img/wtf.svg

        2: <img src="img/wtf.svg"/>    -> 200 OK -> https://cotenfrontend.pl/img/wtf.svg


        https://cotenfrontend.pl/podstrona/
        1: <img src="/img/wtf.svg"/>    -> 200 OK -> https://cotenfrontend.pl/img/wtf.svg

        2: <img src="img/wtf.svg"/>    -> 404 Not found -> https://cotenfrontend.pl/podstrona/img/wtf.svg



    Lekcja 5

        Co to jest ECMAScript

        -ECMAScript jest to ustandaryzowany przez organizację ECMA skryptowy język programowania
        -JavaScript implementuje rzeczy ze specyfikacji ECMAScript
        -Rozwój ECMAScript mocno przyspieszył przez szerokie wykorzystywanie JavaScriptu
        -ES6(i nowsze) wprowadzają wiele udogodnień dla developerów
        -Nowe featury mogą nie być wspierane we wszystkich przeglądarkach (ale są na to sposoby)

        Czyli JavaScript jest zbudowany na bazie czegoś co się nazywa ECMAScript

        Z czego składa się JavaScript?

        -Wartości
        -Operacje porównywania
        -Literały
        -Zmienne
        -Obiekty
        -Funkcje


#Tydzień 4

    Lekcja 4

        <div> - nie ma znaczenia semantycznego, używamy gdy chcemy coś "opakować" (tylko kiedy nie istnieje odpowiedni semantyczny znacznik) - nie nalezy go nadużywać

        display: block; - powoduje, że te elementy zajmują całą szerokość i zjeżdzają jeden pod drugim
        display: inline; - powoduje, że elementy ustawiają się obok siebie
        display: inline-block; - nadaje elementom dodatkowe własności, które nie są dostępne dla elementów inline, a są dostępne dla elementów block, np width i height.
        max-width: - powoduje, że ma zdefiniowaną maksymalną szerokość, ale może mieć mniejszą, jeśli element się zmniejszy, analogicznie z max-height. Działa to również w drugą stronę,
        min-width i min-height.
        overflow - pozwala na odcinanie treści, która nam wystaje. ma własność, np hidden znaczy, że chowa wszystko co wystaje, auto często dodaje scroll, żeby można było przewinąć po orginalnym
        rozmiarze, mozna otrzymac takie pudełko, które można scrollować.

    Lekcja 5

        Przy rozmiarach, używając procentów jako jednostki to uwzględnia się je zależnie od rozmiaru rodzica.
        vw-viewport width - to procent z rozmiaru całego okna, a nie rodzica jak to jest standardowo. np. width: 50vw; - div ma rozmiar 50% ekranu, niezależnie od rozmiaru swojego rodzica.
        Dla wysokości analogicznie vh, np. height: 100vh; 


        Lekcja 6

        Każdy element jest elementem prostokątnym - można powiedzieć, że wszystkie elementy otoczone są "niewidzialnym" prostokątem.
        BOX MODEL

                    -------------------------------------
                    |margin                               |
                    |    ----------------------------     |
                    |   |border                      |    |
                    |   |     ------------------     |    |
                    |   |    | padding          |    |    |
                    |   |    |    -----------   |    |    |
                    |   |    |   | auto:auto |  |    |    |
                    |   |    |    -----------   |    |    |
                    |   |    |                  |    |    |
                    |   |     ------------------     |    |
                    |   |                            |    |
                    |    ----------------------------     |
                    |                                     |
                    -------------------------------------

        1) auto:auto - to jest wysokość i szerokość. (width: 200px i height:300px spowoduje, że auto:auto = 200:300).
        2) padding - jest to wewnętrzny margines, odpowiada za to o ile oddalone mają być elementy, które znajdują się w środku elementu, który ma padding.
        Oprócz zapisu padding: Ypx; lub zapisu padding-top: Ypx;, padding-right: Ypx;, itd. Można zapisać padding: 20px, 40px, 50px, 60px;, wartości będą brane w kolejności top, right, bottom, left - jak kierunek zegara.
        3) border - obramowanie, border-width, border-style np. solid, border-color, albo skrócony border: 10px solid #fff; albo border-top: 3px solid red; itd. Można używać border-radius: 10px; 
        jest to zaokrąglenie obramowania.
        4) margin - margines, odpowiada za to o ile możemy odsunąć się od innych elementów, np. 50px, to element odskakuje o 50px od wszystkich elementów, zapis analogiczny jak powyższe atrybuty, 
        dodatkowy atrybut, można napisać display: inline-block; Elementy są w jednej linii, a jeśli element się nie mieści to przeskoczy do następnego 'wiersza'. 
        Właność marginesu auto - wyśrodkuje elementy, ponieważ stara się podzielić margines na pół np. z lewej i prawej strony. Ważne, aby był zdefiniowany rozmair kontenera, aby obiekt wiedział 
        względem czego ma się 'wyśrodkować' czy ustawić. Margines nie jest częścią elementu, informuje nas tylko o odległości, która musi być zachowana od naszego elementu i działa przy wartościach blokowych.


    Lekcja 7

        Content-box - domyślną wartością box-size jest content-box, szerokość jest np szerokością contentu, nie wpływa na padding, border, czy margin. 
        Border-box definiuje rozmiar całego elementu, jest zrobiony aby można było raz go zdefiniować, a nie był składową wszystkich elementów jak content, padding i border razem. 
        Margines nie jest wliczany
        np.
        width: 100%;
        height: 200px;
        padding: 16px;
        maring: 10px 0;
        box-sizing: border-box;


    Lekcja 8

        - Position pozwala na pozycjonowanie elementów w naszej przestrzeni, można nie pasujące elementy nadpisać. Domyślną własnością dla Position jest static. Position: static; Position: relative;
        - ta pozycja otwiera nam dużo możliwości np. pozwala korzystać z innych pozycji np. z Position: absolute; 
        np.
        position: absolute;
        top: 20px;

        oznacza to, że element, który ma właściwość absolute został przesunięty 20px od góry, jeśli wpiszę się bottom: 50%, to będzie liczone 50% od dołu, jak dodamy right: 10px; to będzie
        jeszcze 10 pikseli od prawej. 
        np.
        position: absolute;
        right: 10px;
        bottom: 50%;

        Działa to jak typowy układ współrzędnych.

        - Jeśli element w elemencie i element podrzędny będzie miał position: absolute, a element nadrzędny position: relative, to będą się przestawiały razem. Jeśli z elementu nadrzędnego usuniemy
        position: relative, to element ten zostanie na swoim miejscu, a element podrzędny mający position: absolute, ustawi się niezależnie od tego elementu nadrzędnego 
        (jest pozycjonowane względem całego body, a nie contenera nadrzędnego) (np. wyjdzie poza ten kontener) 
        w zalezności od wartości rozmiarów jakie będą ustawione.


        - Atrybut z-index pozwala nam zdefiniować kolejność np. elementów, które nakładają się na siebie. Element, który ma wyższy z-index będzie nałożony na element, który ma mniejszy.

        - Position: fixed; Podobny do absolute, Sprawia, że element jest przyklejony (wyskakuje z diva i ustawia się względem okna), jeśli mamy scroll to element fixed porusza się razem ze stroną
        cały czas pozostaje widoczny, w ten sposób można tworzyć nagłówki na stronach, można tworzyć menu przyklejone do góry itp. 
        Co jest ważne, że przy absolute i fixed, szerokość naszego elementu jest kasowana tak jakby był inline-block, więc musimy tę szerokość zdefiniować.

        - Position: sticky; Element jest osadzony w divie, rodzic elementu, który ma sticky nie może mieć overflow. Sticky przykleja się dopiero w momencie, gdy dochodzi do krawędzi okna przy 
        scrollowaniu i wtedy się przykleja i zostaje widoczny.


    Lekcja 9

        Float nie służy do budowania layoutów!!!

        Float służy do opływania elementów. 
        np.
        float: left; - jeśli mamy zdefiniowany float left, to chcemy mieć element z lewej strony, a cała treść ma mnie opływać (ominąć) z prawej strony. Float nie jest ograniczony, jest zakotwiczony 
        w treści ma zdefiniowany rozmiar, pozostała treść będzie go opływać, np. div, a float jest ponad to i może np wyjść poza rozmiar diva, który go opływa. (Stosuje się np. tekst wokół zdjęcia)
        Można dodać diva z włanością clear: both; co powoduje rozszerzanie naszego diva, moment treści do wyokości najwyższego ze zdefiniowanych float'ów. można dać clear: left; wtedy stanie się tak
        dla floata z left.


    Lekcja 12

        BEM - Block element modifier
        block__element--modifier

        przykład w css:
        .hand

        .hand__finger

        .hand__finger--thumb
        .hand__finger--pinky

        przełożenie na html:
        <div class="hand">
            <div class="hand__finger hand__finger--thumb"></div>
            <div class="hand__finger"></div>
            <div class="hand__finger"></div>
            <div class="hand__finger"></div>
            <div class="hand__finger hand__finger--pinky"></div>
        </div>

        B - Block - nadrzędny element - coś co ograniczna nasz content, nasz element
        E - Element - część bloku on nie musi być bezpośrednim dzieckiem
        M - Modifier - modyfikator, jeśli element występuje w kilku wariacjach tworzymy dodatkową klasę.


    Lekcja 13

        -DOM to "złożony" w przeglądarce HTML
        -JavaScript może modyfikować DOM
        -funkcja querySelector zwraca node(węzeł) z HTML-a,
        a selector jest zapisywany zgodnie z css
        -korzystając z BEM tworzymy dodatkową klasę z modyfikatorem --js
        (ułatwia identyfikację/usuwa potencjalne problemy)


#Tydzień 5

    Spoko źródła 👍
    Dokumentacja narzędzia z którego korzystasz
    GitHub issues
    https://developer.mozilla.org 🇵🇱󾓪
    https://devdocs.io/ 󾓪
    https://caniuse.com/ 󾓪
    https://css-tricks.com/almanac/ 󾓪
    https://www.w3.org/TR/html52/ 󾓪
    https://www.w3.org/TR/CSS/ 󾓪

    Fajne grupy polskojęzyczne 👩‍💻👨🏼‍💻
    https://www.facebook.com/groups/742940452405327/
    HTML, CSS i JS: pierwsze kroki
    https://www.facebook.com/groups/1485218891734165/
    Front-end: pierwsza praca w HTML5, CSS3 i JavaScript
    https://www.facebook.com/groups/157790704649699/
    Programowanie - wsparcie na starcie
    https://www.facebook.com/groups/programujdziewczyno/
    Programuj dziewczyno
    https://crossweb.pl/
    Grupy lokalnych spotkań programistycznych (meet.js, dev.js)

    Lekcja 8

        "Typowy reset"
        * - tzw. selektor uniwersalny, który wybiera wszystkie elementy na stronie
        * {
            maring: 0px;
            padding: 0px;
        }
        - nie polecane.


        Nomralizacja - sprawia, że nasze elementy wyglądają jakby były ostylowane przez domyślny styl przeglądarki. Nomralizacja usprawnia nam wyświetlanie elementów pomiędzy różnymi
        przeglądarkami i kiedy będzie się budować kolejne projekty warto go dołączyć.

        Można zmiksować

        Normalize.css + html {
                            box-sizing: border-box;
                        }

                        *, *:before, *after {
                            box-sizing: inherit;
                        }



    Lekcja 9

        display: flex;  zamienia nasz display, domyslny blok na nowy system pozycjonowania i rozmieszczania elementów. Flex pracuje w dwóch osiach w osi poziomej i pionowej (wiersz, kolumna) 
        elementy ustawiają się w rzędzie i przyklejone są do lewej strony.
        flex-direction: (domuślnie row), jak zmienimy na column, to wszystko ustawia się w pionie (dostępne jeszcze: row-reverse, column-reverse).
        Flex box stara się upchać wszystko w jednym wierszu/kolumnie dlatego też zmniejsza rozmiar.

        flex-wrap: wrap; -tworzą się kolumny i wiersze o zdefiniowanym rozmiarze i felx box ustawia je tak jak się mieszczą, jeśli rozszerzymy ekran i felx box znajdzie wystarczjąco miejsca
        to upchnie kolejny element, a kolejne zwyczajnie dalej wiersz niżej. Taka resposywnosć. (jest jeszcze wrap-reverse).

        flex-flow: row wrap; -zamiennik jakby dwóch powyższych w jedno.

        justify-content: -ustawienie elementów wzdłuż osi flex-direction (flex-start, flex-end, center, space-between, space-around). 

        align-content: -ustawianie wierszy/kolumn wzdłuż osi przeciwnej do flex-direction (taki justify-content dla drugiej osi). (stretch, flex-start, flex-end, center, space-between, space-around). 

        align-items: -ustawianie elementów wzdłuż osi przeciwnej do flex-direction, ale w obrębie pojedycznego wiersza. (stretch, flex-start, flex-end, center, baseline). 

        align-self: -ustawianie elementu wzdłuż osi przeciwnej do flex-direction. (stretch, flex-start, flex-end, center, baseline).

        order: -kolejność (domyślnie 0). można ustawiać kolejność elementów, trzeba zdefiniować wartość w poszczególnych klasach css.

        flex-grow: -współczynnik, który odpowiada za to jak bardzo element powinien rosnąć jeśli pozostaje jakieś wolne miejsce, aby je wypełnić. Domyślna wartość to 0, czyli elementy nie rosną
        jeśli wpiszemy flex-grow: 1, wtedy elementy będą wypełniać cały wiersz, będą na 100% wiersza. Można inny element ustawić na 2 i wtedy on dostanie 2x więcej miejsca niż te co mają 1.

        flex-shrink: (domyślnie 1). Jeśli ustawimy na 0 to elementy przestają się kurczyć poza zdefiniowany rozmiar i zaczną wychodzić poza kontener (chować się poza ekranem). Jeśli jest na 0
        to elementy kurczą się proporcjonalnie. 

        flex-basis: -taki rozmiar bazowy, określenie minimalnej szerokości/wysokości elementu wewnątrz naszego kontenera flexowego.

        flex: <flex-grow> <flex-shrink> <flex-basis> np. flex: 1 0 150px;



        Różnica pomiędzy gridem a flexem to, że grida używamy do budowania layoutu, jeśli widzimy, że mamy gdzieś min dwie kolumny to grid, a jeśli widzimy, że jakiś element jest wypozycjonowany wewnątrz innego elementu to wtedy flex.


    Lekcja 10

        Tła

        background-image: url('sciezka do pliku'); 
        background-position: -ustawia tło względem elementu, który to tło dostaje (domyślna wartość 0,0 - lewy górny róg). Np. center center - tło zawsze będzie zaczynało się od środka. 
        Można bottom center, itd. Można podoawać procenty i wszystkie inne jednostki z css. 

        tip:
        body {
            min-height: 100vh; -ustawia body na wysokość całej storny.
        }

        background-repeat: 
        background-attachment: <scroll> tło idzie razem ze stroną, <fixed> tło się nie rusza, jest przyklejone, <local> tło się scrolluje/przesuwa raze z treścią np. w jakimś divie.
        background-origin: -własność, która definiuje nam w którym miejscu te tło się powinno zaczynać <padding-box> <border-box> <content-box>
        background-clip: <padding-box> <border-box> <content-box> - pokazuje w którym miejscu tło powinno być cięte.
        background-color: przy rgb, można zrobić pół przeźroczyste tło, jako czwarty element w rgba(255,255,255,0.495);
        background-size: <auto>,<cover>,<contain>,<width> <height>

        gradienty
        https://cssgradient.io/gradient-backgrounds/

        całościowy zapis, jako ciekawostka, ale dla czytelności raczej rzadko się stosuje, lepiej to oddzielić:
        background:
            url(background.jpg)         /* image */
            top center / 200px 200px    /* position / size */
            no-repeat                   /* repeat */
            fixed                       /* attachment */
            padding-box                 /* origin */
            content-box                 /* clip */
            red;                        /* color */



    Lekcja 11

        Program figma - figma.com 
        Warto założyć konto


#Tydzień 6 

    Lekcja 3 Formularze: form, input & label

        - przykładowy formularz w html

        <form>
            <p>
                <label for="firstName">Your name:</label>
                <input type="text" id="firstName" name="firstName">
            </p>
        </form>

        Można również opakować znacznik input w znacznik label i nie trzeba wtedy używać atrybutu for, działa to tak samo.


    Lekcja 4 Formularze: fieldset, radio, checkbox

        Fieldset grupuje Formularze, przykład:

        <fieldset>
            <legend>Address</legend>
            
            <p>
                <label>Street name:
                    <input class="form__item" id="streetName" placeholder="enter street name" name="streetName"/>
                </label>
            </p>
            <p>
                <label>City:
                    <input class="form__item" id="city" placeholder="enter city" name="city"/>
                </label>
            </p>
        </fieldset>

        tak samo się używa input type="radio", type="checkbox" itd.


    Lekcja 7 Formularze

        Jeśli w formularzu nie działa wysyłanie plików to należy ustawić atrybut enctype:

        -enctype="application/x-www-form-urlencoded"*
                ="multipart/form-data"**

        *- wartość domyślna
        **- używamy, kiedy wysyłamy pliki


        Wyrażenia reguralne

        html5pattern.com/Names


    Lekcja 9 CSS:Grid

        display: grid;
        grid-template-columns: 100px 500px 150px; -przyklad
        grid-template-rows: 100px 200px;

        nowa jednostka fr - to taki ułamek
        1fr/4 1fr/4 2fr/4
        --      --      ----
        np
        grid-template-columns: 1fr 1fr;
        mozna zastosowac takze : 200px 1fr 1fr; -wartosc fr brana jest z wolnej przestrzeni, która nie jest zdefiniowana z żadnej jednostki

        repeat() np.
        grid-template-columns: repeat(4, 1fr); -stworzy 4 kolumny z 1fr

        column-gap: 16px; -tworzy przerwy między komórkami grida, nie wypływają na zewnątrz
        row-gap: 16px; -j.w. tylko pomiędzy wierszami.

        Grid bardzo szybko i bardzo łatwo pozwala na modyfikowanie wyglądu.

        grid-template-columns: minmax(200px, 1fr); - funkcja ta działa na takim zakresie, w tym przykladzie maksymalna wartość którą można przyjąć to 1fr, a minimalna to 200px


        Lekcja 10 Grid-podstawowy layout

        <aside> - tag w html dla panelu bocznego

        display: grid;
        grid-template-areas: "header header" -pierwszy wiersz sklada się z dwóch kolumn,
        "article aside"
        "footer footer";

        .header {
                grid-area: header;
        }

        .article {
                grid-area: article;
        }


        .aside {
                grid-area: aside;
        }


        .footer {
                grid-area: footer;
        }

        nie zdefiniowany obszar mozna zapisac za pomoca kropki, ale trzeba pamietac, aby zdefiniować rozmiar, np:

        display: grid;
        grid-template-areas: "header header header"
        "article . aside"
        "footer footer footer";
        grid-template-columns: 1fr, 64px, 200px;

        column-gap: 16px - odstępy między kolumnami
        row-gap: 16px - odstępy między wierszami


        definiowanie od kiedy kolumna ma się zacząć np. zeby header zaczynał się od drugiej kolumny
        grid-column-start: 2;
        grid-column-end: 4;

        analogicznie z wierszami grid-row-start / end


        Można wartości także nazywać i odnośić się do nich po ich nazwach np.
        grid-template-columns: [pierwsza] 1fr, [druga] 64px, [trzecia] 200px;
        grid-column-start: pierwsza;
        grid-column-end: trzecia;

        grid-column-start: pierwsza;
        grid-column-start: span 3; - oznacza idź przez 3 kolumny


        do definiowania wierszy i kolumn za pomocą liczb i nazw moża użyć także grid-area
        grid-area: row start / col start / row end / col end
        grid-area: 1 / pierwsza / 3 / span 3


        Grid to nie tetris - wszystko zamyka się w reguralnych prostokątach.
        Grid działa tylko na bezpośrednie dzieci swoje, nie można zejść do kolejnych potomków, ale są pracę nad tym, aby można było.
        Grid nie zastępuje flexboxa, ale się dobrze uzupełniają. Grid jest stosowany do budowania całych layoutów, 
        a z koleiflexbox jest używany do pozycjonowania elementów, centrowania już wewnątrz jakiegoś pojedynczego elementu do konkretnej treści,
        ale nie używajmy flexboxa do budowania layoutów.



    Lekcja 11 CSS: Media queries & mobile first

        @media - słowo kluczowe, serce media queries

        media type:
        @media screen, print, all ...

        media feature:
        max-width
        max-width
        color
        aspect-radio
        orientation
        ...

        można to łączyć za pomocą and, not i przecinka

        np.
        @media screen and (max-width: 600px) {  -można to traktować jako osobny plik css, który działa tylko i wyłącznie na ekranie, któr ma maksymalną szerokość 600px
                body {
                        background: red;
                }

                .footer {
                        background: blue;
                }
        }

        dobrze media queries definiować po zdefiniowaniu naszego elementu, aby element nie nadpisał właściwości z media queries

        -moblie first - polega na tym, że stylujemy najpierw na urządzenie mobline

        można także elementy chować, np:
        @media screen and (min-width: 768px) and (max-width: 1024px) {
                .moblie {
                        display: none;
                }
        }

        można za pomocą media queries nadpisywać pojedynczą własność, nie trzeba wszystkiego przeklejać kilka razy.


    Lekcja 12: JS: Eventy

        przykład:
        <header class="main__header main__heading--js" id="top">
                <h1 class..</h1>
                <button class="action--js">Zmień nagłówek</button>
        </header>

        <button> vs <a>
        button: interakcje na stronie
        a: nawigacja

        element.addEventListener(type, listener [,options])

        przykład  cd:
        const button = document.querySelector('.action--js');

        const myClick = () => {
                const heading = document.querySelector(".main__heading--js");
                heading.innerHTML = 'Nowy tekst po naciśnięciu przycisku";
        }

        button.addEventListener('click', myClick);

        można także bezpośrednio zdefiniować funkcję jako argument:
        button.addEventListener('click', (e) => {
                console.log(e.target);
                console.log('halo');
        });

        bez tego e, również zadziała 
        button.addEventListener('mouseenter', () => {
                console.log('halo');
        });

        e-to jest mouse event, dostajemy informacje o pozycji kursora itp itd.
        ciekawą pozycją jest target, jeśli wypiszemy e.target to dostajemy nasz element, czyli jeśli chcielibyśmy jeszcze cos zrobić
        z naszym elementem po kliknięciu to możemy za pomocą e.target to wywołać, oczywiście jest to dużo bardziej rozbudowane.


        Lekcja 13 Hamburger menu


        element.classList.add
        remove
        toggle
        contains


#Tydzień 7

    Lekcja 2 Pseudoelementy i Pseudoselektory

        - Css może tworzyć treść, dzięki własności content: ""

        element::before

        np.
        .week-summary__title::before {
            content: "HELLO ";
        }

        albo


        .week-summary__title::after {
            content: " GOODBYE";
        }

        Ta treść nie jest cześcią DOM-u, nie jest cześcią treści, nie można go np. skopiować, nie jest pełnoprawnym elementem, ale można z nim wiele rzeczy zrobić, np zmienić mu display

        Najczęściej elementy te używa się do celów dekoracyjych, np. ustawianie jakichś elementów interpunkcyjnych itp.

        - Pseudoklasy to modyfikator elementu, którego działanie wynika z innego działania (używa się je z pojedynczym dwukropkiem :)

        np.
        .navigation__link:hover {
            color: green;
        }

        .navigation__link:visited {
            color: grey;
        }

        .navigation__link:focus {
            border: 3px solid yellow;
        }

        :first-child, :last-child, 
        selektor:not(selektor)
        np.
        .week--summary:not(.week--summary--special) {
            background: hotpink;
        }

        Więcej pseudoklas:
        https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes



    Lekcja 3 .gitignore

        Zwyczajnie w pliku .gitignore wpisać nazwę pliku, który chcemy ignorować. Np. mając plik passwords, wystarczy, że w gitignore napiszemy: passwords, bez żadnych dodatkowych znaków.



    Lekcja 4 Node.js

        Node to taki JavaScript uruchamiany poza przeglądarką. Jest oparty na silniku chrome'owym VT. Różnica między nodem, a tym co dzieje się w przeglądarce to, że node nie ma dostępu do DOM
        i do wszystkich API związanych z DOM'em, z przeglądarką. To jest środowisko, które jest uruchamiane poza przeglądarką, więc nie ma żadnych query selector'ów i tego typu rzeczy.
        To jest taki konsolowy JavaScript.



    Lekcja 5 NPM i NPX

        -NPM - nie jest to tłumaczone jako node package manager (chociaż nim jest). Jest to narzędzie pozwalające nam na budowanie rzeczy szybciej.

        Po co nam te paczki?
        -Dodajemy do projektów sporo gotowych bibliotek/narzędzi
        -Nie można polegać na konfiguracji edytora / jego wtyczkach
        -Uniwersalne źródło ze wszystkimi narzędziami
        -Dostęp do aktualizacji

        O npm można również powiedzieć, że to taki app store / sklep play dla frontendowca, jest to taka skrzynka z narzędziami, których możemy użyć w naszym projekcie

        -Polecenia:
        npm init - to polecenie, które robimy raz w projkecie, ono inicjalizuje nasz projekt, tak, żeby można było korzystać z npm.

        szukanie paczek npmjs.com


        -Po zainstalowaniu choć jednej paczki tworzy się plik: package-lock.json, który trzyma informacje co zainstalowaliśmy, jest to plik, który nie edytujemy, można go wrzucić do repozytorium
        jest on po to, aby trzymać po prostu wersje odpowiednio i pilnować, żeby zależności się nie rozjeżdżały co się czasami zdarzało, można w skrócie powiedzieć, że jest to plik, który blokuje wersje.

        Pojawia się również katalog o nazwie node_modules tutaj się ściągają nasze paczki.

        -npm install <nazwa_paczki> --save   -jeżeli instalujemy narzędzia, które bedą widoczne w przeglądarce np. normalize.css
        lub 
        npm install <nazwa_paczki> --save-dev   -jeśli instalujemy narzędzie developerskie np. jakieś serwery

        -Jeśli usunie się katalog node_modules, a w package.json w dependecies są zdefiniowane paczki, zrobi się npm install to automatycznie zostaną ściągniete paczki, które są zdefiniowane w package.json

        -Nie commitujemy node_modules! 
        Jak zrobić, aby się nie commitował?
        Zakładamy plik .gitignore i wpisujemy: node_modules

        -Alternatywą dla npm-a jest Yarn.

        -npx 

        np. npx cowsay SIEMA SIEMA

        To narzędzie robi tyle, że wypisuje nam za pomocą ascii art tekst który wpiszemy dalej.

        mozna zainstalowac taka paczke, aby miec ja w swoim projekcie i działała szybciej poprzez:
        npm install cowsay --save-dev


        Lekcja 6 Npm Scripts

        definiujemy polecenia dla npm w package.json
        fragment z package.json, dodamy polecenie start np:
        "scripts": {
            "start": "node script.js",
            "test": "echo \"Error: no test specified\" && exit 1"
        },


    Lekcja 7 SASS/SCSS

        Problemy z CSS
        -porozrzucane klasy (bałagan w plikach)
        -@media oddzielone od elementu (konieczność ponownego definiowania)
        -kiepska czytelność plików (szczególnie przy zagnieżdżeniach)
        -brak możliwości definiowania funkcji do robienia podobnych rzeczy

        SASS to preprocesor CSS
        SASS potrzebuje narzędzia do działania

        SASS/SCSS - SASS jest narzędziem, ma swoją składnię i ma także składnię SCSS czyli są to tak naprawdę dwie różne składnie

        .scss - dla programisty
        .css - dla przeglądarki

        programista pisze scss -> nastepnie narzędzie sass zamienia te pliki na pliki .css i te cssy są zrozumiałe dla przeglądarki.

        https://www.sassmeister.com/

        Co daje sass czego nie daje css

        -$zmienna - np. 

        $myfavouritegrey: #ccc;
        $desktop: 1024px;
        .main {
            color: $myfavouritegrey
        }

        @media (min-width: $desktop) {
            .main {
                color: red;
            }
        }

        na css zostanie to przekonwertowane w ten sposób, że wszędzie gdzie występuje zmienna będzie podmieniona na jej wartość w tym przypadku #ccc i 1024px.


        -@ @mixin, @include

        @mixin borderBackground {
            border-radius: 10px;
            background: hotpink;
        }

        .main {
            color: $myfavouritegrey
            @include borderBackground;
        }

        można utworzyć również mixin, który przyjmuje parametry.

        @mixin borderBackgroundParameter($radius, $background) {
            border-radius $radius;
            background: $background;
        }

        .main {
            color: $myfavouritegrey
            @include borderBackgroundParameter(20px, red);
        }


        -@extend - wyrzuca styl na góre w pliku css jako osobna definicja

        .font-style {
            font-size: 13px;
            coloer: green;
        }

        .main {
            color: $myfavouritegrey
            @extend font-style;
        }


        -& parent selector

        .about {
            color: red;
        }

        .about__title {
            font-size: 20px;
        }

        .about__title--smaller {
            font-size: 16px;
        }

        @media (max-width: 768px) {
            .about__title {
                font-size: 18px;
            }
        }


        to powyżej równa się temu:
        W samym zapisie jest to już tylko 8 linijek w porównaniu z 17 wcześnie plus wszystko trzymamy w jednym miejscu.

        .about-sass {
            color: red;
            &__title {
                font-size: 20px;
                &--smaller {
                    font-size: 16px;
                }
                @media (max-width: 768px) {
                    font-size: 18px;
                }
            }
        }

        w css wynik tego .about-sass bedzie wyglądał następująco:
        .about-sass {
            color: red;
        }

        .about-sass__title {
            font-size: 20px;
        }

        .about-sass__title--smaller {
            font-size: 16px;
        }

        @media (max-width: 768px) {
            .about-sass__title {
                font-size: 18px;
            }
        }

        Kod wynikowy jest identyczny z pierwszą definicją, jednak wszystko jest zapisane w sass'ie w sposób zagnieżdżony.

        Należy pamiętać, że kiedy korzystyamy z preprocesorów NIE EDYTUJEMY plików wynikowych .css


    Lekcja 8 node-sass

        node-sass - narzędzie zamieniające pliki scss(sass) na css

        instalacja:
        npm install node-sass

        wywołanie node-sass: (przykład)
        npx node-sass main.scss main.css

        polecenie z atrybutem watch (-w) - Polecenie ciągle pracuje, wykrywa zmiany i generuje ponownie plik.
        npx node-sass -w main.scss main.css

        Można również te polecenie zdefiniować jako skrypt w package.json np.

        "scripts": {
            "sass": "npx node-sass -w main.scss main.css",
            "start": "node script.js",
            "test": "echo \"Error: no test specified\" && exit 1"
        },

        i wystarczy wywołać npm run sass, od tego momentu jeśli zapiszemy zmianę w pliku main.scss będzie generowana w pliku main.css.



    Lekcja Prace domowe: (Przerzucić na trello! Spróbuj wyestymować ile czasu zajmie dany task i zapisz ten czas)
    1. Dodaj before z ozdobnikiem do nagłówków.
    2. Zainstaluj node.js i napisz prosty skrypt z console.log
    3. Stwórz plik .gitignore i wpisz node_modules
    4. Zainicjuj projekt w projkecie homepage (npm init)
    5. Dodaj skrypt z cowsay, pobaw się przełącznikami (znajdziesz je w dokumentacji)
    6. Dodaj paczkę node-sass
    7. Przenieś zawartość style.css do scss/style.scss i stwórz skrypt w package.json
    8. Przerób BEM-a na składnię scss z wykorzystaniem &




#Tydzień 8


    Lekcja 2

        Po co nam moduły?
        -Aplikacje szybko rosną i trudno trzymać wszystko w jednym pliku
        -Chcemy korzystać z wybranych funkcji w różnych plikach
        -Chcemy mieć porządek w projekcie
        -Chcemy korzystać z kodu udostępnianego przez innych developerów (albo udostępniać swój)


        Można importować w stylach poprzez:
        @import "ścieżka"
        np.
        @import "modules/week-summary.scss";


        Lekcja 3 import/export w js

        export something
        export default something

        import nazwaRzeczy from 'nazwa-modułu/ścieżka-do-z-pliku';  -działa w przypadku exportu default
        import {pierwszy, drugi} from 'nazwa-modułu/ścieżka-do-z-pliku';    -nawiasy sześcienne jeśli chcemy importować rzeczy nazwane, jeśli więcej niż jedna wtedy po przecinku.
        import {hello as hi} from 'nazwa-modułu/ścieżka-do-z-pliku';    -z użyciem as można także stosować aliasy
        import * as newName     -importuje wszystkie exporty pod jeden alias


        Warto pamietać, że można także importować rzeczy z node_modules.
        np.
        import {Moment} from './node_modules/moment/moment.js';     -ogólnie tego nie robimy, cieżko importować coś z node_modules bez wspomagacza. Czyli bez webpack'a.


    Lekcja 4 Webpack

        Jest to:
        -Podstawowe narzędzie frontendowca
        -Może automatyzować procesy
        -Ułatwia development
        -Używają go wiodące frameworki i biblioteki
        -Warto znać podstawy


        Webpack posiada entry - input którego ścireżka to src/plik.js
        poleceniem: 
        npx webpack zostaje przekonwertowany i powstaje zminikowany plik dist/main.js - output, którego można później załączyć do naszej strony


        loader - pozwala na operacje na plikach innych niż JS

        plugin - pozwala na wykonywanie różnych operacji

        mode - webpack posiada dwa tryby 'development' i 'production'.

        Możliwości webpacka rozszerzamy za pomocą paczek z NPM


    Lekcja 5 StarterKit

        Webpack Starter Kit - Jest to swego rodzaju szablon z którego można korzystać przy tworzeniu swoich projektów, można z niego korzystać nawet do projektów komerycjnych

        https://github.com/maciejkorsan/wtf-webpack-starter/

        Co mamy w środku:
        -Serwer lokalny z autoodświeżaniem
        -Wspracie dla scss i sourcemap
        -Minifikacja
        -Babel
        -Publikacja na github pages


        npm run start - runs development mode

        npm run build - runs build process for production

        npm run publish - runs build process and publish the page using gh-pages branch

        DIST - jest wynikiem naszej pracy, zawartość tego katalogu publikujemy na serwerze. Nie commitujemy go.

        public/* -> dist/*
        katalog public - czasem potrzebujemy pliki, które bezpośrednio wrzucamy na serwer bez żadnego przetwarzania ich i takie pliki to mogą być np. ikony, jakiś robot.txt, indeksowanie itp.
        wszystko co się znajduje w public jest kopiowane tak jak jest bez zmian, do katalogu dist. 

        src/pages/plik.html -> dist/plik.html   - pliki.html również zwyczajnie zminifikowane lecą do dist.

        src/scss/main.scss -> dist/index.[hash].css     - pliki sassowe zamieniane są na pliki z unikalnym hashem tak samo z obrazkami.

        !! Nie edytujemy nic w katalogu dist !!



    Lekcja 8

        Zmienna w CSS - CSS Custom Properties

        Pseudoselektor :root - używamy ponieważ ma większą specyficzność niż inne selektory

        Definiujemy w :root, wartość - dowolna wartość możliwa w CSS

        np.

        :root {
            --small-padding: 8px;
            --text-color: yellow;
        }

        Pobranie wartości ze zmiennej

        h1 {
            padding: var(--small-padding);
            color: var(--text-color);
        }


        Co możemy zrobić jeszcze za pomocą custom properties w css to zmieniać wartość za pomocą java scriptu

        document.documentElement.style.setProperty('--zmienna','wartość')



    Lekcja: Prace domowe:

        0. Dodaj taski do trello i wyestymuj
        1. Utwórz z szablonu nowe repozytorium i sklonuj do siebie na dysk
        2. Przenieś istniejące strony html do src/pages
        3. Zawartość stylów ze starej strony wklej do src/scss/main.scss
        4. Zawartość skryptów ze starej strony wklej do src/js/index.js
        5. Dodaj bibliotekę moment, zaimportuj ją i wykorzystaj gdzieś na stronie np. moment().startOf('day').fromNow();
        6. Opublikuj stronę za pomocą skryptu publish
        7. Zrób przycisk zmieniający tryb strony - szczegóły w wideo

        7. Rozwiązanie:
        HTML:
        <article>
        <button class="mode-js">Dark mode</button>
            <header>
                <h1>Mój pierwszy wpis</h1>
            </header>
            <p>Lorem Ipsum coś tam coś tam</p>
        
            <footer>
                Napisano: 20 X 2020
            </footer>
        </article>


        CSS:
        :root {
        --background-color: white;
        --text-color: black;
        }

        body {
        background: var(--background-color);
        color: var(--text-color);
        }


        JS:
        let isDark = false;

        const mode = document.querySelector('.mode-js');

        mode.addEventListener('click', () => {
            if(!isDark) {
                document.documentElement.style.setProperty('--background-color','black');
                document.documentElement.style.setProperty('--text-color','white');
                isDark = true;
                mode.innerHTML = 'Light Mode';
            } else if(isDark) {
                document.documentElement.style.setProperty('--background-color','white');
                document.documentElement.style.setProperty('--text-color','black');
                isDark = false;
                mode.innerHTML = 'Dark Mode';
            }   
        });


------------------


    Lekcja BONUS: HTML co robić, czego nie robić


        Czego nie robić:
        -Nie pisać html, który składa się tylko z divów - nie nadużywać ich, nie stostować ich do czego się da
        -Nie robić przycisków, headerów, loga, linków, itp. za pomocą diva
        -J.w. nie używać spanów wszędzie tam gdzie nie używamy div'a
        -Nie używać spanów jako label w formularzu
        -Nie używać znacznika a. z buttonem
            <a> - nawigacja między dokumentami i kotwice wewnątrz dokumentu

            <button> - akcje w danym dokumencie.

        -Brak używania tabel

        Co robić:
        -Należy używać znaczniki main,section,article itd.
        -Wybierajac znacznik, ZAWSZE kierujemy się jego znaczeniem
        -<main> - Główna cześć dokumentu.
        -<section> - Sekcje dokumentu. Dzielimy dokument na sekcje, np. jak w wordzie
        -<article> - Treść, która może funkcjonować samodzielnie. Jeśli nie wiemy kiedy używać section, a kiedy article to można zrobić analogicznie jak w gazecie, gdzie jest pewna sekcja, 
        która zawiera różne artykuły.
        -<header> - header można używać w kilku miejscach, może ich być wiele. Może być header artykułu, sekcji itd.
        -<footer> - stopka dokumentu/sekcji/artykułu
        -używać ul, li, ol. Nie tworzyć list za pomocą div'ów

        Przykład:

        ŹLE:
        <div>
            <div>
                <span>Mój pierwszy wpis</span>
            </div>
            <div>Lorem Ipsum coś tam coś tam</div>
            <div>
                Napisano: 20 X 2020
            </div>
        </div>


        DOBRZE:
        <article>
            <header>
                <h1>Mój pierwszy wpis</h1>
            </header>
            <p>Lorem Ipsum coś tam coś tam</p>
            <footer>
                Napisano: 20 X 2020
            </footer>
        </article>


        Poprawne używanie nagłówków:
        -Każda sekcja powinna mieć swój nagłówek
        -h1 - jeden dla dokumentu
        -Ważność nagłówków określa stopień zagnieżdżenia sekcji. Czyli nie używamy h4 bo chcemy napis mały, albo h1 na koniec dokumentu bo tam napis jest duży
        tylko używamy je po kolei chronologicznie od h1 od początku do h2,3,4-6, nie robiąc dziur a styl zmieniamy w css za pomoca klasy, wtedy należy ustawić odpowiedni font, wielkość itp.


        Poprawne pisanie formularzy:
        -Każdy input musi mieć label
        -Placeholder nie zastępuje label
        -Input bez label w projekcie? Użyj aria-label


        Pamietać o używaniu validatora!

        Pisząc HTML-a myśleć jaką treść on reprezentuje!


#Tydzień 9

    Lekcja 2
    
        Autoprefixer:
        https://autoprefixer.github.io/

    Lekcja 3
        Google fonts - dobra praktyka: nie stosować więcej niż dwóch fontów, one również zużywają zasoby, więc zbyt dużo może zwolnić ładowanie się strony, jak i brzydko wyglądać.

        @font-face - pozwala dołączyć plik z fontami, aczkolwiek rzadko używane, obecnie wczytuje się fonty z serwera.

    Lekcja 5

        Markdown, edytor - https://dillinger.io/

        Za jego pomocą można zrobić ładne readme!
        

    Lekcja 6
        Tablice w JS
        
        -Dodawanie elementów do tablicy w JS poprzez metodę tablica.push(element);
            const myArray = ['X', 'D'];
            const myString = 'LOL';
            myArray.push(myString);

        -Dodwanie elementu na początek tablicy.
            tablica.unshift(element);

        -Usunięcie elementu z początku tablicy, metoda nie przyjmuje żadnych elementów.
            tablice.shift();

        -Usuwanie elementu z końca tablicy
            tablica.pop();

        -Sprawdzanie czy mamy dany element w tablicy i zwrócenie jego indeksu (pierwszego napotkanego w przypadku większej ilości tych samych elementów):
            tablica.indexOf(element);

            Jeżeli takiego elementu nie ma w tablicy i wypiszemy np ten element np. console.log(tablica.indexOf(element)); - zostanie zwrócona wartość -1.
            A więc trzeba uważać np. gdybyśmy chcieli napisać taki warunek

            if(tablica.indexOf(element)) {} - czy istnieje dany element w tablicy i mimo, że nie istnieje to metoda zwróci wartość (-1) i warunek zostanie spełniony!!

            Z kolei gdy zrobimy tak z elementem, który jest pierwszym elementem w tablicy, czyli jego indeks to 0, a więc mimo, że znajduje się on w tablicy warunek taki:
            if(tablica.indexOf(element)) {}  - nie zostanie spełniony, metoda zwróci false, ponieważ jej rezultat to 0, a 0 jest odbierane jako false w jacaScript.
            Należy uważać na takie rzeczy!
            Rozwiązaniem tego jest sformułowanie warunku w ten sposób:
            if(tablica.indexOf(element) >= 0) {}

        -Usuwanie n elementów od danej pozycji
            tablica.splice(index, liczbaElementów);

        -Pobieranie n elementó od danej pozucji
            tablica.slice(index, liczbaElementów);

    
    Lekcja 7
        Pętle w JS
        -klasyczna for
            for(let i=0; i<3; i++) {
                console.log(`${i} wykonanie pętli`);
            }
        -for each
            const myArray = ['a', 'b', 'c', {name: 'James'}];

            for(let element of myArray) {
                console.log(element);
            }


    Lekcja 8
        Przechowywanie danych w JS

        -Przechowywanie zaczęło się od Cookies!
            document.cookie - tak możemy podejrzeć ciasteczka.
            Format zapisu ciastek to document.cookie = "nazwa = wartość"

            Był to pierwszy mechanizm do przechowywania danych, obecnie nie są zbyt popularne do przechowywania danych, są lepsze sposoby.

        -localStorage - do ręcznego wyczyszczenia (trwalsze) - jest dostępne nawet po wyłączeniu strony (jeśli nie zostało ręcznie usunięte)
            localStorage.setItem('nazwa', wartość)

            localStorage.getItem('nazwa') - pobranie wartości z localStorage

            localStorage.removeItem('nazwa') - usunięcie wartości z localStorage

        -sessionStorage - do zamknięcia sesji (zakładki przeglądarki)


        -JSON 
            obiekt -> JSON string
            JSON.stringify(obiekt)  -   metoda służy do przekształcenia obiektu w String np. w kontekscie localStorage, należy pamiętać, że będzie to tylko napis.

            JSON string -> obiekt
            JSON.parse(JSONString)

    
    Lekcja 9
        Projektowanie, ogólne rady!

            1. Zacznij od prawdziwej treści! - Content
            2. Naszkicuj wstępny układ na papierze
            3. Porzuć wizję strony idealnej, zacznij od najniższego poziomu, który daje jakąś wartość.
            4. Działaj "krok po kroku" (one step a time)
            5. Trzymaj się siatki/grida
            6. Zacznij od czarnego/białego/odcieni szarości
            7. Kolory zostaw na koniec i ogranicz ich liczbę do minimum
            8. Nie wymyślaj koła na nowo
            9. Wykorzystaj gotowe elementy / znajdź UI KIT
            10. Kopiuj

            Inspiracja designerskie/www
                https://dribbble.com/
                https://www.behance.net/
                https://refactoringui.com/
                https://www.awwwards.com/websites/
                https://www.siteinspire.com/
                https://codepen.io/
                https://tympanus.net/codrops/
                https://www.cssdesignawards.com/
                https://pdkit.co/


    Lekcja Prace domowe

        1. Przetestuj branche - załóż branch w którym zmienisz tło strony i zmerguj go
        2. Zrób ładne readme do swojego projektu.
        3. Zrób prosty edytor odporny na odświeżanie
            1. Załóż nowe repozytorium (np. simple-editor) za pomocą starterkita
            2. W figmie wykonaj prosty prototyp, wykorzystaj pdkit
            3. Przenieś wygląd na kod
            4. Stwórz querySelectory do wszystkich elementów z którymi masz interakcje (textarea, buttony)
            5. Do przycisków dodaj eventlistenery:
                a. Save - zapisuje treść w localStorage
                b. Load - wczytuje treść z localStorage
            6. Opublikuj edytor na GitHub Pages


#Tydzień 10

    Lekcja 3
        Animacje

        - transition: name duration timing-function delay
        - will-change: name     -przekazanie przeglądarce informacji, że jakaś własność będzie zmienialna za pomocą animacji, pozwala to przeglądarce na przygotowanie się, zachowanie
            pewnych zasobów graficznych potrzebnych na wykonanie/przyspieszenie animacji.
        - transform: rotate() | scale() | translate() 
        - transform-origin: - punkt względem którego ma wykonywać się transform, środek transforamcji (domyślnie rośnie od środka w każdą stronę proporcjonalnie)
        transform i transition bardzo dobrze ze sobą współgrają.
        -animation: @keyframes duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name
            Główna róznica między animation a transition jest taka, że w animation jest więcej opcji, kolejna jest taka, że animacja może trwać niezależnie od tego czy dodamy sobie
            jakiś hover, może dziać się cały czas, może być zapętlona, działać bez interakcji z użytkownikiem itp.
            Co ważne w animacjach, nie definiujemy żadnego transition, jest to już automatycznie obsługiwane.
            np.
            -
            @keyframes serduszko {
                from {
                    transform: scale(1);
                }
                to {
                    transform: scale(2);
                }
            }

            .heart {
                display: inline-block;
                animation: serduszko 1s ease-in infinite;
            }


            -
            @keyframes serduszko {
                0% {
                    transform: scale(1);
                }
                50% {
                    transform: scale(1.5);
                }
                100% {
                    transform: scale(1);
                }
            }
            .heart {
                display: inline-block;
                animation: serduszko 1s ease-in-out infinite;
            }


            Animacje naturalnie można również dodawać za pomocą JavaScriptu

    Lekcja 4
        SVG = Scalable vector graphics - skalowalna grafika wektorowa.

        rastrowe - jpg, png, - są w jakiś sposób kompresowane, zawiera informacje o pikselach, przy powiększaniu widoczne są piksele, traci się ostrość, grafika rastrowa ma swoje ograniczenia.
        wektorowa - opisywana jest przez wzory matematyczne, można skalować ją dowolne, ale niestety nie wszystko można zapisać w wektorze, np. zdjęcie wektorowo ciężko byłoby zrobić
                    nie wiadomo byłoby jak to powiększyć i również te pliki ważyłyby bardzo dużo.
        Pliki svg są to normalne pliki tekstowe, które można edytować także w edytorze tekstu, zmieniać kolor poszczególnego elementu itd.
        Dodawanie svg do storny:
        1) <img src="obrazek.svg" alt="obrazek xyz">
        2) Znacznik svg
            
            <svg width="212" height="324" viewBox="0 0 212 324" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M193.83 27.0502V44.5669L125.66 69.3049L130.052 50.1942L193.83 27.0502Z" fill="white"/>
            <path d="M193.83 44.567V27.0503L139.871 7.47095L136.156 23.6389L193.83 44.567Z" fill="white"/>
            <path d="M18.169 73.2812V55.7645L81.947 32.6205L77.5555 51.7312L18.169 73.2812Z" fill="white"/>
            <path d="M18.169 55.7645V73.2812L68.4123 91.5161L72.1276 75.3482L18.169 55.7645Z" fill="white"/>
            <path d="M105.999 6.37609L88.4333 82.8147L105.999 76.443L123.565 0L105.999 6.37609Z" fill="white"/>
            <path d="M211.396 90.7454L0.602966 167.241V184.758L211.396 108.262V90.7454Z" fill="#E30613"/>
            <path d="M211.396 73.2286L0.602966 149.724V167.241L211.396 90.7454V73.2286Z" fill="#B6117C"/>
            <path d="M211.396 55.7119L0.602966 132.207V149.724L211.396 73.2286V55.7119Z" fill="#612679"/>
            <path d="M0.602966 219.787L105.253 181.81L211.396 143.287V125.774L0.602966 202.27V219.787Z" fill="#FEC700"/>
            <path d="M211.396 108.262L0.602966 184.758V202.27L211.396 125.774V108.262Z" fill="#ED6D05"/>
            <path d="M70.8672 124.224V176.774L53.3011 183.146V178.767L47.4472 180.891V176.512L41.5889 178.631V183.01L35.7351 185.143V189.522L18.169 195.898V143.348L35.7351 136.972V167.626L41.5889 165.498V161.119L47.4472 158.995V163.374L53.3011 161.255V130.6L70.8672 124.224Z" fill="white"/>
            <path d="M132.348 101.904V119.42L114.782 125.796V160.83L97.2163 167.228V132.194L79.6503 138.544V121.027L132.348 101.904Z" fill="white"/>
            <path d="M193.83 79.6003V97.1171L158.698 109.86V118.619L185.047 109.055V126.571L158.698 136.136V144.894L141.132 151.27V98.7198L193.83 79.6003Z" fill="white"/>
            <path d="M0.602966 250.445V259.204L18.169 252.828V244.069L0.602966 250.445Z" fill="white"/>
            <path d="M211.396 173.945L193.83 180.322V189.08L211.396 182.704V173.945Z" fill="white"/>
            <path d="M44.6235 222.927L45.616 222.406C48.0753 221.074 50.2183 220.831 52.0452 221.674L52.7391 222.953C53.7228 224.753 53.5471 226.018 52.2165 226.737C51.0436 226.998 49.914 227.424 48.8613 228.002C41.8964 231.777 38.9102 237.679 39.9027 245.707L40.3901 247.292L40.6229 247.73C41.4016 249.158 42.8391 249.54 44.9353 248.878C46.6517 248.362 48.3033 247.652 49.8582 246.762L52.4185 245.374L52.5766 245.663L51.9969 245.974L52.0715 246.114C52.2955 245.992 52.6381 246.049 53.0948 246.285L53.2309 246.211L53.4637 246.649L51.9837 247.608L52.0584 247.743L52.3306 247.595L52.5195 248.593L52.7962 248.444L52.9542 248.733L52.6776 248.882L52.7522 249.018C52.8231 248.964 52.9057 248.927 52.9935 248.911C53.0813 248.894 53.1717 248.899 53.2573 248.924C53.3429 248.949 53.4213 248.994 53.4862 249.056C53.5511 249.117 53.6005 249.192 53.6305 249.276L53.9204 249.118L53.6964 249.066L53.6218 248.926L53.6876 248.694L54.5659 248.23L54.724 248.519L54.9348 248.58L54.8777 248.808L54.4386 249.04L54.5132 249.175L54.9524 249.316L55.3915 249.083L55.172 249.009L55.0973 248.869L55.4486 248.501L55.9493 248.409C56.4118 249.259 53.3275 251.48 46.6963 255.074C42.5127 257.343 38.4652 256.905 34.5538 253.76L33.5437 251.908C31.1547 247.529 31.5939 241.232 34.8612 233.016C36.9727 228.715 40.3881 225.185 44.6235 222.927ZM52.9982 245.76L53.8545 245.3L54.0082 245.589L53.1563 246.027L52.9982 245.76Z" fill="white"/>
            <path d="M71.9958 212.522L72.1671 212.46C73.2474 212.066 74.7186 212.707 76.5806 214.383L76.8133 214.492L77.0944 215.259C77.27 215.745 76.6069 216.463 75.0962 217.409L75.1533 217.562C78.8041 219.76 81.1229 222.216 82.1095 224.928L82.3949 225.712C84.8483 232.426 83.5235 237.797 78.4206 241.823C76.9908 242.869 75.4341 243.731 73.7875 244.389L71.9782 245.046C66.8812 246.885 62.2657 245.615 58.1318 241.236C57.7893 241.28 57.2535 240.426 56.4586 238.661L56.0546 237.553C54.216 232.517 56.2112 226.614 62.0402 219.844C65.8755 215.981 69.194 213.54 71.9958 212.522ZM62.6375 236.773L62.6946 236.927C63.3533 238.731 64.8816 239.353 67.2793 238.792L68.5968 238.315C72.1363 237.03 74.6805 233.819 76.2292 228.681C76.2729 227.136 76.0819 225.593 75.6627 224.104C75.0304 222.689 74.5473 221.861 74.2135 221.621V221.109C73.3352 219.651 72.8434 218.946 72.7072 218.994C69.6478 220.597 66.6865 224.03 63.8232 229.294C62.3213 232.339 61.9261 234.832 62.6375 236.773Z" fill="white"/>
            <path d="M176.654 173.359L177.748 172.965C178.431 172.716 179.166 172.643 179.885 172.751C180.604 172.86 181.284 173.147 181.863 173.586L182.034 174.051L181.661 192.754C181.186 195.965 181.112 200.282 181.437 205.703L181.143 206.343L180.673 206.513L179.878 206.272L179.777 206.483L179 206.767L178.047 206.583L176.545 207.306L174.788 206.36L174.388 205.27C174.222 204.805 174.188 203.584 174.287 201.604L166.734 192.123L164.099 188.839L163.941 188.896L162.465 205.537C162.287 207.439 162.392 209.358 162.777 211.23L162.992 211.326L163.045 211.484C163.177 212.36 163.12 212.868 162.878 212.955L162.408 213.126L160.507 212.758L160.195 212.872L159.629 213.253H159.102L158.904 213.691L158.689 213.594L158.535 213.651L158.434 213.862L156.348 212.504L156.12 211.882C155.439 210.012 155.804 202.112 157.213 190.801L158.065 181.5C158.463 180.846 160.113 179.895 163.014 178.649C163.717 178.39 164.635 178.649 165.768 179.411L165.825 179.568C166.896 182.507 169.839 187.683 174.648 192.465C175.196 189.448 175.258 183.299 174.836 176.652C174.702 175.172 175.079 174.27 175.969 173.945C175.921 173.757 176.141 173.56 176.654 173.359Z" fill="white"/>
            <path d="M123.592 192.439L126.754 191.467L129.858 190.337C130.133 190.226 130.434 190.201 130.724 190.265C131.013 190.328 131.276 190.477 131.479 190.691L131.365 190.91C131.918 190.748 132.243 190.81 132.357 191.099L132.419 191.27L130.631 191.918L130.688 192.075L131.33 191.843L131.453 192.172L131.136 192.285L131.356 192.399L131.259 192.614L131.378 192.942L132.256 192.802L132.318 192.973L132.199 193.192L132.265 193.367C132.924 193.125 133.411 193.437 133.727 194.304C134.188 194.204 134.465 194.282 134.562 194.55L134.68 194.878L125.436 199.524C124.613 199.816 124.337 201.086 124.606 203.334C122.933 216.607 122.09 223.562 122.09 227.034C121.673 227.91 121.247 228.458 120.821 228.611L119.92 228.195C119.27 228.431 118.849 228.274 118.651 227.735L118.541 227.971L118.388 228.028C118.26 227.757 117.54 227.463 116.218 227.153L115.415 226.504C114.615 224.315 115.112 218.968 116.903 207.621L117.088 204.048L115.432 204.963C113.14 205.795 111.237 205.318 109.723 203.531L108.524 201.753L108.401 201.425C108.153 200.733 108.349 199.923 108.99 198.994L111.124 198.224C114.541 196.976 115.994 196.568 123.592 192.439Z" fill="white"/>
            <path d="M149.546 183.063C149.565 183.147 149.603 183.225 149.657 183.291C149.711 183.358 149.78 183.411 149.858 183.447C149.936 183.482 150.022 183.499 150.108 183.497C150.194 183.494 150.278 183.471 150.354 183.431L150.464 183.724L150.024 183.886L150.081 184.044C150.578 183.864 150.863 183.869 150.933 184.066L150.99 184.223L150.402 184.434C150.512 184.736 150.841 184.78 151.452 184.565L151.557 184.858L151.118 185.02L151.171 185.161L152.958 184.512L154.578 184.766L154.482 184.977L154.53 185.117C155.031 184.937 155.316 184.95 155.408 185.156C155.54 185.515 153.845 186.575 150.323 188.335C149.073 188.785 146.949 190.338 143.951 192.995L143.512 197.738L143.665 197.681C144.128 197.295 145.611 196.587 148.114 195.557L148.575 195.903L148.18 196.222L148.233 196.358C149.027 196.069 149.462 196.021 149.55 196.218L148.918 196.8L148.966 196.941L149.26 196.831L149.287 197.33C149.467 197.829 150.007 198.083 150.903 198.097L150.951 198.237L150.872 198.443L150.92 198.578C151.416 198.399 151.702 198.412 151.799 198.622L151.847 198.758C151.958 199.05 149.12 200.975 143.332 204.534C142.554 204.814 142.102 207.538 141.975 210.954L149.273 207.013L149.383 207.306L149.537 207.249L150.226 206.811C150.534 207.249 150.876 207.416 151.245 207.284L151.408 207.722C151.264 207.793 151.138 207.895 151.038 208.02C150.938 208.144 150.866 208.289 150.828 208.445L150.516 208.558L150.565 208.694L151.469 208.37L151.579 208.681L150.837 208.948L151.043 209.031L151.1 209.189L150.995 209.382C152.462 208.848 153.344 208.812 153.63 209.264L153.551 209.469C154.073 209.36 154.376 209.417 154.46 209.649C153.788 210.525 153.849 210.63 149.102 213.384C143.461 216.564 140.782 218.549 141.066 219.34C141.118 219.909 140.833 220.518 140.218 221.157L140.06 221.214L138.905 220.776L138.593 220.886L137.904 221.324C137.812 221.07 137.227 221 136.147 221.114L135.743 221.416L135.537 221.333L135.48 221.179V220.654L135.181 220.763L135.084 220.973L134.944 221.026L134.733 220.925L134.68 220.79C134.43 217.549 135.067 206.154 136.591 190.1C136.231 189.108 136.708 188.261 138.022 187.56L143.898 185.62L149.546 183.063Z" fill="white"/>
            <path d="M15.9733 284.778C16.0391 284.953 16.5046 285.032 17.3742 285.015C17.5235 285.417 17.8924 285.593 18.4896 285.531L18.5511 285.706L18.4501 285.917L18.516 286.092C18.9551 285.934 19.1966 285.965 19.2757 286.184L19.1791 286.398C19.6973 286.212 20.5492 286.522 21.7349 287.331C21.8974 287.769 21.4934 287.865 10.7298 292.998C9.61728 293.401 9.22351 294.531 9.54848 296.387C9.41088 296.434 9.38599 297.37 9.47382 299.194L9.63192 299.137L13.7775 297.289C14.5124 297.757 15.013 297.94 15.2794 297.841L15.5824 298.673L16.0874 299.037L16.1445 299.194L15.6571 299.37L15.7229 299.545L15.8767 299.488L16.8033 298.953L17.9099 298.923L17.9758 299.098L17.8572 299.317L17.9231 299.488C18.6301 299.387 19.021 299.431 19.0868 299.615C18.1529 301.145 14.7436 303.68 8.85901 307.221C7.81383 315.581 7.5723 320.797 7.2605 321.935C6.3822 322.255 6.00453 322.575 6.1187 322.899L5.96501 322.956L5.3414 322.807L5.45998 322.588L5.21844 321.931L4.88908 322.054C5.00765 322.373 4.95496 322.575 4.73538 322.654C4.42358 322.154 4.04591 321.984 3.60676 322.146L3.66385 322.299C3.79559 322.877 3.73411 323.214 3.47941 323.306L3.25983 323.192L3.08856 323.254L2.87777 323.691L1.92042 323.127C1.85597 323.159 1.78489 323.176 1.71271 323.177C1.64053 323.177 1.56918 323.161 1.5042 323.13C1.43922 323.099 1.38235 323.053 1.33801 322.996C1.29367 322.939 1.26304 322.873 1.24852 322.803C0.532699 320.841 0.238467 315.533 1.24852 307.756C2.12682 300.019 2.11657 294.898 1.21778 292.393C1.52518 290.545 2.06534 289.477 2.84263 289.197L5.71908 288.899C11.3226 285.987 11.4764 286.412 15.9733 284.778Z" fill="white"/>
            <path d="M34.1629 277.815L35.5155 277.325C42.2565 274.877 46.222 275.766 49.0458 279.742L49.5376 280.618L49.7001 281.056C50.1832 282.384 47.9655 285.689 43.047 290.97C46.8969 296.809 49.2844 301.003 50.2095 303.552L50.4247 303.648L50.473 303.788V304.314L51.1186 305.627L51.022 305.838L50.7277 305.947C50.5784 305.54 50.4027 305.378 50.192 305.452C50.3017 305.754 50.2578 305.938 50.0602 306.008L49.7484 306.122L49.5552 306.017L49.3971 306.074C49.3971 306.512 49.318 306.788 49.1687 306.845L48.3475 306.963L48.1675 307.401C48.1337 307.299 48.0795 307.205 48.0081 307.125C47.9367 307.045 47.8496 306.98 47.7521 306.934C47.6547 306.889 47.5489 306.864 47.4414 306.86C47.3339 306.857 47.2268 306.875 47.1267 306.915C43.8364 303.36 40.8459 299.54 38.1856 295.494L33.0299 300.101C32.9245 301.747 32.7137 302.728 32.3975 303.052L32.5205 303.871L32.0814 304.033V302.107L32.0243 301.949L31.8662 302.006L31.7081 303.941L32.1472 304.143C31.7652 304.279 31.3919 305.605 31.023 308.115C30.8913 308.176 30.8298 308.942 30.8429 310.414C30.6365 310.488 30.496 311.675 30.4301 313.97L30.2764 314.027C30.1096 313.567 29.4552 313.343 28.3266 313.361L28.1422 313.799C28.0675 313.593 27.8743 313.545 27.5625 313.659L27.1673 313.978C27.0338 313.781 26.8489 313.623 26.6322 313.522C26.4156 313.42 26.1755 313.38 25.9376 313.405L25.7664 312.936C24.8881 310.504 25.2028 302.768 26.7105 289.727C24.0756 289.067 22.5957 288.298 22.2707 287.419L22.0028 286.674C21.8887 286.114 23.4198 284.533 26.5964 281.932C26.8042 280.942 29.3264 279.57 34.1629 277.815ZM33.6667 291.47L33.9785 291.356C39.0814 286.578 41.185 283.311 41.9183 281.31L41.8613 281.152L38.7872 282.111L38.4886 282.216C34.6636 283.605 33.7326 284.625 34.0619 285.527C33.98 288.989 33.8482 290.97 33.6667 291.47Z" fill="white"/>
            <path d="M67.1564 266.337L67.332 266.272C68.465 265.866 70.0035 266.537 71.9475 268.286L72.189 268.4L72.4833 269.201C72.6677 269.709 71.9739 270.458 70.3929 271.448L70.4544 271.61C74.2604 273.905 76.6845 276.471 77.7267 279.308L78.0254 280.127C80.59 287.134 79.2038 292.748 73.8666 296.97C72.3738 298.06 70.7512 298.962 69.0359 299.654L67.1344 300.355C61.809 302.29 56.9783 300.966 52.6424 296.383C52.2823 296.435 51.7026 295.538 50.8858 293.694L50.4467 292.538C48.5232 287.283 50.6091 281.111 56.7046 274.023C60.733 269.974 64.217 267.412 67.1564 266.337ZM57.3721 291.693L57.4292 291.85C58.1172 293.736 59.7157 294.386 62.2247 293.799L63.5992 293.3C67.2969 291.96 69.9552 288.603 71.5742 283.228C71.6203 281.613 71.4204 280.001 70.9814 278.446C70.3183 276.97 69.8176 276.103 69.4707 275.853V275.315C68.566 273.791 68.0391 273.055 67.8985 273.125C64.6986 274.798 61.6026 278.387 58.6105 283.893C57.0442 287.064 56.6314 289.664 57.3721 291.693Z" fill="white"/>
            <path d="M101.546 253.607L102.64 253.209C103.323 252.96 104.058 252.887 104.777 252.995C105.496 253.104 106.176 253.391 106.755 253.83L106.926 254.299L106.553 273.002C106.078 276.214 106.004 280.53 106.329 285.952L106.035 286.587L105.56 286.779L104.765 286.539L104.664 286.749L103.887 287.033L102.934 286.849L101.428 287.572L99.6712 286.626L99.2716 285.536C99.1047 285.074 99.071 283.853 99.1706 281.87L91.6171 272.389L89.0042 269.105L88.8461 269.162L87.3705 285.803C87.1912 287.705 87.2963 289.624 87.6823 291.496L87.8975 291.592L87.9502 291.75C88.082 292.626 88.0249 293.134 87.7833 293.221L87.3135 293.392L85.4119 293.024L85.1001 293.138L84.5336 293.519H84.0066L83.809 293.957L83.5938 293.861L83.4401 293.917L83.3391 294.128L81.2532 292.77L81.0248 292.148C80.3441 290.278 80.7086 282.378 82.1183 271.067L82.9702 261.77C83.3713 261.113 85.0211 260.161 87.9195 258.915C88.6221 258.661 89.54 258.915 90.673 259.677L90.7301 259.834C91.8016 262.773 94.7439 267.949 99.5526 272.731C100.102 269.714 100.163 263.565 99.7415 256.918C99.6039 255.438 99.9815 254.535 100.874 254.211C100.813 254.014 101.033 253.817 101.546 253.607Z" fill="white"/>
            <path d="M176.812 226.119L177.906 225.72C178.589 225.474 179.324 225.402 180.043 225.51C180.761 225.619 181.441 225.905 182.021 226.342L182.192 226.811L181.823 245.514C181.346 248.726 181.271 253.042 181.599 258.464L181.301 259.099L180.835 259.269L180.04 259.029L179.939 259.243L179.158 259.528L178.209 259.344L176.703 260.066L174.946 259.116L174.551 258.026C174.384 257.564 174.35 256.343 174.45 254.36L166.892 244.879L164.279 241.599L164.125 241.656L162.65 258.315C162.474 260.218 162.581 262.136 162.966 264.008L163.177 264.108L163.234 264.262C163.366 265.137 163.309 265.65 163.063 265.737L162.597 265.904L160.696 265.536L160.384 265.65L159.813 266.035H159.29L159.088 266.473L158.878 266.372L158.719 266.429L158.623 266.644L156.537 265.286L156.309 264.66C155.628 262.795 155.992 254.89 157.402 243.579L158.258 234.269C158.657 233.612 160.305 232.661 163.203 231.418C163.909 231.158 164.827 231.412 165.957 232.18L166.014 232.333C167.09 235.276 170.032 240.452 174.841 245.234C175.39 242.212 175.451 236.068 175.025 229.416C174.893 227.936 175.271 227.039 176.163 226.715C176.079 226.531 176.303 226.347 176.812 226.119Z" fill="white"/>
            <path d="M123.754 245.208L126.916 244.236L130.021 243.11C130.295 242.999 130.597 242.973 130.886 243.036C131.176 243.1 131.439 243.249 131.641 243.465L131.523 243.68C132.081 243.517 132.401 243.583 132.515 243.868L132.581 244.043L130.794 244.691L130.851 244.849L131.492 244.612L131.611 244.941L131.299 245.055L131.518 245.173L131.417 245.383L131.54 245.711L132.419 245.571L132.485 245.746L132.366 245.965L132.427 246.136C133.086 245.9 133.574 246.212 133.89 247.073C134.351 246.973 134.632 247.073 134.729 247.319L134.847 247.651L125.603 252.298C124.78 252.59 124.504 253.858 124.773 256.103C123.095 269.376 122.257 276.331 122.257 279.808C121.818 280.684 121.414 281.231 120.983 281.384L120.105 280.946C119.455 281.183 119.033 281.029 118.836 280.486L118.726 280.723L118.568 280.78C118.445 280.511 117.723 280.219 116.403 279.904L115.595 279.256C114.796 277.066 115.292 271.715 117.084 260.373L117.272 256.799L115.612 257.715C113.326 258.547 111.423 258.068 109.903 256.278L108.705 254.5L108.586 254.172C108.331 253.48 108.529 252.674 109.174 251.746L111.309 250.971C114.703 249.749 116.157 249.324 123.754 245.208Z" fill="white"/>
            <path d="M149.708 235.836C149.725 235.921 149.762 236 149.815 236.068C149.868 236.135 149.937 236.19 150.015 236.226C150.093 236.262 150.179 236.28 150.266 236.277C150.352 236.274 150.436 236.25 150.512 236.209L150.617 236.506L150.178 236.668L150.235 236.822C150.736 236.642 151.017 236.651 151.091 236.848L151.148 237.001L150.556 237.216C150.665 237.518 151.017 237.557 151.605 237.347L151.715 237.641L151.276 237.803L151.324 237.943L153.111 237.295L154.736 237.544L154.635 237.759L154.688 237.895C155.184 237.715 155.47 237.728 155.566 237.938C155.695 238.292 153.999 239.35 150.477 241.113C149.229 241.569 147.107 243.123 144.109 245.777L143.67 250.52L143.828 250.463C144.29 250.072 145.773 249.364 148.276 248.339L148.716 248.681L148.325 249L148.373 249.14C149.172 248.851 149.607 248.803 149.69 249L149.058 249.583L149.111 249.718L149.405 249.613L149.431 250.113C149.611 250.607 150.147 250.866 151.043 250.879L151.096 251.015L151.012 251.22L151.065 251.361C151.56 251.183 151.845 251.196 151.921 251.4L151.974 251.54C152.085 251.832 149.245 253.757 143.455 257.316C142.682 257.597 142.229 260.32 142.102 263.736L149.401 259.795L149.506 260.093L149.664 260.036L150.354 259.598C150.661 260.036 150.999 260.207 151.372 260.071L151.535 260.509C151.391 260.579 151.265 260.68 151.164 260.804C151.063 260.928 150.99 261.072 150.951 261.227L150.639 261.341L150.692 261.481L151.592 261.152L151.706 261.463L150.96 261.735L151.166 261.818L151.223 261.971L151.118 262.168C152.582 261.634 153.46 261.595 153.753 262.05L153.669 262.256C154.192 262.142 154.495 262.203 154.583 262.436C153.906 263.311 153.968 263.417 149.225 266.171C143.636 269.333 140.985 271.306 141.272 272.092C141.32 272.661 141.039 273.265 140.42 273.909L140.266 273.966L139.111 273.528L138.8 273.642L138.057 274.08C137.965 273.83 137.381 273.76 136.301 273.874L135.901 274.176L135.695 274.093L135.638 273.94V273.432L135.343 273.537L135.242 273.751L135.106 273.8L134.891 273.703L134.843 273.563C134.588 270.327 135.225 258.928 136.753 242.874C136.393 241.884 136.867 241.039 138.185 240.338L144.052 238.385L149.708 235.836Z" fill="white"/>
            <path d="M194.374 219.949L195.134 219.673C199.123 218.23 203.467 218.077 207.549 219.235C209.44 220.076 210.611 221.118 211.062 222.362C212.09 225.177 210.706 231.413 206.912 239.318C204.809 242.508 202.345 245.447 199.569 248.076C196.387 250.412 194.494 252.058 193.891 253.016L192.183 253.454C190.649 255.03 189.664 255.897 189.227 256.055L189.012 255.954L189.192 255.048L189.052 255.1L188.261 255.722L187.774 254.877L187.853 254.185L187.717 254.233L187.084 254.811L186.869 254.711L186.821 254.575V254.067L186.663 254.124L186.114 254.5C185.811 254.61 185.587 254.461 185.442 254.063C184.919 254.172 184.616 253.677 184.533 253.445C184.796 252.814 185.306 252.617 186.057 251.978C187.292 250.054 188.146 245.11 188.617 237.146C188.907 232.329 188.955 228.799 188.753 228.247C186.938 228.904 185.104 228.218 183.25 226.189C182.937 225.357 186.645 223.277 194.374 219.949ZM195.103 243.281C202.16 236.239 205.041 230.082 203.754 226.553C202.911 224.234 200.534 223.459 196.623 224.227C195.88 224.494 195.657 225.589 195.951 227.503L195.103 243.281Z" fill="white"/>
            </svg>

            Tak wygląda zapis formatu svg, współrzędne matematyczne co pozwala na nieskończone skalowanie. Taki kod wrzucony do html, daje taki sam efekt jak 'src', ale daje
            sporo nowych możliwości.
            Można modyfikować poszczególne ścieżki to znaczy osobno niektóre elementy obrazka, np. obrazek mający napis, możemy zmienić kolor poszczególnych liter, ogólnie
            manipulować nim na wiele sposobów.
            np.
            można do znacznika, lub do poszczególnego elementu dodać klasę:
            class="element"

            .element {
                opacity: .5;
                transition: opacity .3s ease-in;
            }

            można dodać do wszystkich elementów na raz:
            svg * {
                opacity: .5;
                transition: opacity .3s ease-in;
            }
            svg *:hover {
                opacity: 1;
            }

        Svg bardzo dobrze wspólgra z css-ami, w svg można również wrzucić animacje, np. dodając znacznik style, np:

            <svg width="212" height="324" viewBox="0 0 212 324" fill="none" xmlns="http://www.w3.org/2000/svg">
            <style type="text/css">
                @keyframes show {
                    from {
                        opacity: .3;
                    }
                    to {
                        opacity: 1;
                    }
                }
                .animate {
                    animation: show 2s ease-in infinite alternate;
                }
            </style>
            <path d="M193.83 27.0502V44.5669L125.66 69.3049L130.052 50.1942L193.83 27.0502Z" fill="white"/>
            <path d="M193.83 44.567V27.0503L139.871 7.47095L136.156 23.6389L193.83 44.567Z" fill="white"/>
            .
            .
            .
            <path d="M194.374 219.949L195.134 219.673C199.123 218.23 203.467 218.077 207.549 219.235C209.44 220.076 210.611 221.118 211.062 222.362C212.09 225.177 210.706 231.413 206.912 239.318C204.809 242.508 202.345 245.447 199.569 248.076C196.387 250.412 194.494 252.058 193.891 253.016L192.183 253.454C190.649 255.03 189.664 255.897 189.227 256.055L189.012 255.954L189.192 255.048L189.052 255.1L188.261 255.722L187.774 254.877L187.853 254.185L187.717 254.233L187.084 254.811L186.869 254.711L186.821 254.575V254.067L186.663 254.124L186.114 254.5C185.811 254.61 185.587 254.461 185.442 254.063C184.919 254.172 184.616 253.677 184.533 253.445C184.796 252.814 185.306 252.617 186.057 251.978C187.292 250.054 188.146 245.11 188.617 237.146C188.907 232.329 188.955 228.799 188.753 228.247C186.938 228.904 185.104 228.218 183.25 226.189C182.937 225.357 186.645 223.277 194.374 219.949ZM195.103 243.281C202.16 236.239 205.041 230.082 203.754 226.553C202.911 224.234 200.534 223.459 196.623 224.227C195.88 224.494 195.657 225.589 195.951 227.503L195.103 243.281Z" fill="white"/>
            </svg>

    
            Z kolei np. taki kod dodany w style do svg nie zadziała, ponieważ jest to zamknięty element i nie widzi zdarzenia myszki.
                .animate:hover {
                    transform: scale(3);
                }
    

    Lekcja 5
        <head> & Open Graph

         -head 
            - znaczniki meta: 
                    - kodowanie jak są zapisane znaki,
                    - viewport - jak ma zachowywać się strona, to co widzimy, ma być szerokość - szerokość urządzenia i skala 1, skala ma być nie powiększona, zwykła.
                    - description - bardzo ważne, trzeba uzupełniać description. Ten opis jest tutaj jest widoczny przy wynikach przy wyszukiwaniu w google.
            - tytuł
            - icon / favicon - ikony, głownie można je generować
            - Open Graph - protokół który opisuje naszą stronę za pomocą specjalnych tagów meta, opisujemy czym nasza strona jest, czy jest to dokument, czy film itp.
                Np. domyślna konfiguracja starter kit'owa
                <!-- Title -->
                <meta property="og:title" content="My og title" />
                <!-- OPTIONAL description. 2-4 sentences. -->
                <meta property="og:description" content="My og description of my website" />
                <!-- full url with http(s) ie. https://maciejkorsan.github.io/my-repo/ -->
                <meta property="og:url" content="http://dawidkupny.github.io/strona-test" />
                <!-- full url to the image with http(s) ie. https://maciejkorsan.github.io/my-repo/assets/img/fb.png. Facebook suggests at least 1200 x 630. -->
                <meta property="og:image" content="http://dawidkupny.github.io/strona-test/og.png" />


    Lekcja 6
        WAI - Web Accessibility Initiative - Poradniki, wytyczne jak nasze strony powinny się zachowywać niezależnie od naszej sprawności.
        WCAG - Web Content Accessibility Guidelines - Dokument, który opisuje nam to jak nasza strona powinna się zachowywać, co powinno się tam znajdować, jak powinna działać,
                różne standardy, wymogi, które muszą spełniać zależne od krajów, czy strony rządowe, czy jakichś instytucji itp.
        A11y - The A11y Project - projekt społecznościowy, jego celem jest to, aby sobie pomagać i robić dobre strony, dużo dobrych poradników. Są tutaj różne checklisty, jeśli 
                chcemy się upewnić, że wszystko jest poprawnie. 
        Fundacja Widzialni - polska fundacja artykuły, wytyczne, szablony, gotowe rzeczy, które pozwalają na budowe stron dostępnych.

        Ważne zasady, które należy przestrzegać:
            1. Pisz semantycznie.
            2. Trzymamy kontrast.       https://color.a11y.com/
            3. Dobrze dobierz Kolory    http://colorsafe.co/
            4. Unikamy autoplay
            5. Nie ograniczaj rzeczy czasowo - rzeczy związanych z treścią
            6. Nie usuwaj :focus    - bo tracimy możliwość korzystania z klawiatury
            7. Używaj alt (i kończ opisy kropką!)
            ARIA - Accessible Rich Internet Applications - wytyczne, które pozwalają nam na korzystanie z takich atrybutów html-owych, które wzbogacają naszą stronę o dostępność
                    np. używaliśmy ich przy formularzach, kiedy nie zdefiniowaliśmy label.
            ChromeVox - narzędzie do chrome, które czyta naszą stronę, treść i znaczniki.


    Lekcja 7

        PWA - Progressive Web Apps
            - powzala na tworzenie "natywnych" aplikacji bez konieczności nauki nowych technologii (powiadomienia, aparat itp)
            - Łatwa akutalizacja i dystrybucja
            - Działają offline!
            - Technologia wciąż w trakcie silnego rozwoju (ale ma już trochę stablinych rzeczy)

            Składa się z kilku rzeczy. Sam szkielet strony jest taki sam, ale musimy dodać dwa pliki:
                1. manifest.json - plik, który opisuje naszą aplikację. Pamiętać, aby dobrze skonfigurować. Jest gotowy w katalogu public w webpack starter kit, ale należy 
                    dostoswać konfigurację do swojej strony.
                    w kodzie html dołączyć manifest.json 
                    <link ref="manifest" href="manifest.json" />
                    

                2. service worker - plik JavaScriptowy, który pozwala na pracę w tle. Uruchamia się z naszą stroną, ale działa niezależnie. Taki specjalny jacaScript, który jest uruchamiany
                    obok naszej strony, dzięki czemu możemy korzystać z róznego rodzaju api i m.in. pozwala, aby nasza aplikacja działa całkowicie bez internetu.
                    Też jest gotowy w katalogu public w webpack starter kit
                    jest także zarejestrowany w pwa.js - jest to gotowe, nie trzeba nic zmieniać,
                    z kolei w index.js, należy odkomentować lub dodać:
                    
                        import {registerSW} from './pwa.js';
                        registerSW();
                    
                    importujemy funkcję do rejestracji naszego service workera i ją wywołujemy.

            Dzięki PWA w przeglądarce będzie opcja install dzięki której można zainstalować naszą aplikację jako niezależną aplikację systemie. 
            Również na urządzeniach mobilnych, działać to będzie jak osobna aplikacja mobilna, taka zapisana strona, ale działjąca online.

            Czasami może wystąpić problem z cache, ponieważ service worker zapisuje wszystko co się da do pamięci podręcznej, żeby nie trzeba było tego ściągać za każdym razem,
            ale dzięki temu też działa offline.

            Przy developmencie dobrze jest mieć te funkcje zakomentowane, aby bez problemowo dało się testować wszystko, a te funkcje odkomentować do opublikowania.


            -Generowanie swoich ikon,
                Aby wygenerować swoje ikony zapisujemy własną ikonę w assets/img i w package-json jest skrypt, który podmienia ikonę.
                Zmieniamy nazwę ikony w skrypcie w razie potrzeby i odpalamy go w konsoli poleceniem:
                npm run generate-icons


    Lekcja prace domowe
        
        1. Uzupełnij swoje sekcje head, tagi og, grafikę itp.
        2. Dodaj animacje w swoich projektach
        3. Stwórz HYDRAPP
            1. Załóż nowe repozytorium (np. hydrapp)
            2. Wgraj starterkit
            3. Uzupełnij manifest.json ze swoim adresem i odkomentuj wymagane linijki
            4. W figmie otwóz hydrapp.fig
            5. Przenieś wygląd na kod
            6. Stwórz querySelectory do wszystkich elementów z którymi masz interakcje (buttony, wartość licznika)
            7. Do przycisków dodaj eventlistenery:
                a. Dodaj szklankę - zwiększa wartość o 1
                b. Usuń szklankę - zmniejsza wartość o 1 (ustaw limit, żeby nie mógł zejść poniżej 0)
            8. Wartość szklanek przechowuj w localStorage pod kluczem z dzisiejszą datą
                const key = new Date().toISOString().slice(0, 10)
            9. jeśli pod kliczem nic nie ma - wstaw 0 (nowy dzień)
            10. W ten sposób w localStorage będziesz mieć nową historię dni (możesz ją później wykorzystać - może kolejna podstrona z historią?)

            Flow urchomienia apli (js)
            1. Sprawdź czy pod kluczem z dzisiejszą datą jest jakaś wartość / w ogóle istnieje
                a. jeśli tak - wstaw ją w licznik
                b. jeśli nie - ustaw ją na zero, stwórz wpis w localStorage i wstaw ją w licznik
            2. Po kliknięciu w odpowiedni button zmieniaj odpowiednio wartość w localStorage i aktualizuj wartość licznika w aplikacji
            3. Po północy każdego dnia kiedy uruchomisz aplikację stworzy się nowy klucz w localStorage i zaczniesz od nowa.

        



        
