Lekcja 13

-DOM to "złożony" w przeglądarce HTML
-JavaScript może modyfikować DOM
-funkcja querySelector zwraca node(węzeł) z HTML-a,
a selector jest zapisywany zgodnie z css
-korzystając z BEM tworzymy dodatkową klasę z modyfikatorem --js
(ułatwia identyfikację/usuwa potencjalne problemy)

Tydzien V

Spoko źródła 👍
Dokumentacja narzędzia z którego korzystasz
GitHub issues
https://developer.mozilla.org 🇵🇱󾓪
https://devdocs.io/ 󾓪
https://caniuse.com/ 󾓪
https://css-tricks.com/almanac/ 󾓪
https://www.w3.org/TR/html52/ 󾓪
https://www.w3.org/TR/CSS/ 󾓪

Fajne grupy polskojęzyczne 👩‍💻👨🏼‍💻
https://www.facebook.com/groups/742940452405327/
HTML, CSS i JS: pierwsze kroki
https://www.facebook.com/groups/1485218891734165/
Front-end: pierwsza praca w HTML5, CSS3 i JavaScript
https://www.facebook.com/groups/157790704649699/
Programowanie - wsparcie na starcie
https://www.facebook.com/groups/programujdziewczyno/
Programuj dziewczyno
https://crossweb.pl/
Grupy lokalnych spotkań programistycznych (meet.js, dev.js)


Tydzien VI

Lekcja 7 Formularze

Jeśli w formularzu nie działa wysyłanie plików to należy ustawić atrybut enctype:

-enctype="application/x-www-form-urlencoded"*
        ="multipart/form-data"**

*- wartość domyślna
**- używamy, kiedy wysyłamy pliki


Wyrażenia reguralne

html5pattern.com/Names


Lekcja 9 CSS:Grid

display: grid;
grid-template-columns: 100px 500px 150px; -przyklad
grid-template-rows: 100px 200px;

nowa jednostka fr - to taki ułamek
1fr/4 1fr/4 2fr/4
--      --      ----
np
grid-template-columns: 1fr 1fr;
mozna zastosowac takze : 200px 1fr 1fr; -wartosc fr brana jest z wolnej przestrzeni, która nie jest zdefiniowana z żadnej jednostki

repeat() np.
grid-template-columns: repeat(4, 1fr); -stworzy 4 kolumny z 1fr

column-gap: 16px; -tworzy przerwy między komórkami grida, nie wypływają na zewnątrz
row-gap: 16px; -j.w. tylko pomiędzy wierszami.

Grid bardzo szybko i bardzo łatwo pozwala na modyfikowanie wyglądu.

grid-template-columns: minmax(200px, 1fr); - funkcja ta działa na takim zakresie, w tym przykladzie maksymalna wartość którą można przyjąć to 1fr, a minimalna to 200px


Lekcja 10 Grid-podstawowy layout

<aside> - tag w html dla panelu bocznego

display: grid;
grid-template-areas: "header header" -pierwszy wiersz sklada się z dwóch kolumn,
"article aside"
"footer footer";

.header {
        grid-area: header;
}

.article {
        grid-area: article;
}


.aside {
        grid-area: aside;
}


.footer {
        grid-area: footer;
}

nie zdefiniowany obszar mozna zapisac za pomoca kropki, ale trzeba pamietac, aby zdefiniować rozmiar, np:

display: grid;
grid-template-areas: "header header header"
"article . aside"
"footer footer footer";
grid-template-columns: 1fr, 64px, 200px;

column-gap: 16px - odstępy między kolumnami
row-gap: 16px - odstępy między wierszami


definiowanie od kiedy kolumna ma się zacząć np. zeby header zaczynał się od drugiej kolumny
grid-column-start: 2;
grid-column-end: 4;

analogicznie z wierszami grid-row-start / end


Można wartości także nazywać i odnośić się do nich po ich nazwach np.
grid-template-columns: [pierwsza] 1fr, [druga] 64px, [trzecia] 200px;
grid-column-start: pierwsza;
grid-column-end: trzecia;

grid-column-start: pierwsza;
grid-column-start: span 3; - oznacza idź przez 3 kolumny


do definiowania wierszy i kolumn za pomocą liczb i nazw moża użyć także grid-area
grid-area: row start / col start / row end / col end
grid-area: 1 / pierwsza / 3 / span 3


Grid to nie tetris - wszystko zamyka się w reguralnych prostokątach.
Grid działa tylko na bezpośrednie dzieci swoje, nie można zejść do kolejnych potomków, ale są pracę nad tym, aby można było.
Grid nie zastępuje flexboxa, ale się dobrze uzupełniają. Grid jest stosowany do budowania całych layoutów, 
a z koleiflexbox jest używany do pozycjonowania elementów, centrowania już wewnątrz jakiegoś pojedynczego elementu do konkretnej treści,
ale nie używajmy flexboxa do budowania layoutów.



Lekcja 11 CSS: Media queries & mobile first

@media - słowo kluczowe, serce media queries

media type:
@media screen, print, all ...

media feature:
max-width
max-width
color
aspect-radio
orientation
...

można to łączyć za pomocą and, not i przecinka

np.
@media screen and (max-width: 600px) {  -można to traktować jako osobny plik css, który działa tylko i wyłącznie na ekranie, któr ma maksymalną szerokość 600px
        body {
                background: red;
        }

        .footer {
                background: blue;
        }
}

dobrze media queries definiować po zdefiniowaniu naszego elementu, aby element nie nadpisał właściwości z media queries

-moblie first - polega na tym, że stylujemy najpierw na urządzenie mobline

można także elementy chować, np:
@media screen and (min-width: 768px) and (max-width: 1024px) {
        .moblie {
                display: none;
        }
}

można za pomocą media queries nadpisywać pojedynczą własność, nie trzeba wszystkiego przeklejać kilka razy.


Lekcja 12: JS: Eventy

przykład:
<header class="main__header main__heading--js" id="top">
        <h1 class..</h1>
        <button class="action--js">Zmień nagłówek</button>
</header>

<button> vs <a>
button: interakcje na stronie
a: nawigacja

element.addEventListener(type, listener [,options])

przykład  cd:
const button = document.querySelector('.action--js');

const myClick = () => {
        const heading = document.querySelector(".main__heading--js");
        heading.innerHTML = 'Nowy tekst po naciśnięciu przycisku";
}

button.addEventListener('click', myClick);

można także bezpośrednio zdefiniować funkcję jako argument:
button.addEventListener('click', (e) => {
        console.log(e.target);
        console.log('halo');
});

bez tego e, również zadziała 
button.addEventListener('mouseenter', () => {
        console.log('halo');
});

e-to jest mouse event, dostajemy informacje o pozycji kursora itp itd.
ciekawą pozycją jest target, jeśli wypiszemy e.target to dostajemy nasz element, czyli jeśli chcielibyśmy jeszcze cos zrobić
z naszym elementem po kliknięciu to możemy za pomocą e.target to wywołać, oczywiście jest to dużo bardziej rozbudowane.


Lekcja 13 Hamburger menu


element.classList.add
remove
toggle
contains

